import logging
from datetime import datetime, timedelta
from enum import Enum, auto
from typing import Dict

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, ParseMode
from telegram.ext import CallbackContext, ConversationHandler, CommandHandler, MessageHandler, Filters

from askbot.ask_common import channel_msg_link, send_msg, chat_msg_link
from askbot.models import Question, UserAskBan
from askbot.room import get_rooms
from bot.handlers.common import get_club_user
from club import settings

log = logging.getLogger(__name__)


class State(Enum):
    REQUEST_FOR_INPUT = auto()
    INPUT_RESPONSE = auto()
    FINISH_REVIEW = auto()


class QKeyboard(Enum):
    TITLE = "–ó–∞–≥–æ–ª–æ–≤–æ–∫"
    BODY = "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"
    TAGS = "–¢–µ–≥–∏"
    ROOM = "–ö–æ–º–Ω–∞—Ç–∞"
    REVIEW = "–ó–∞–≤–µ—Ä—à–∏—Ç—å"


question_keyboard = [
    [QKeyboard.TITLE.value],
    [QKeyboard.BODY.value],
    [QKeyboard.ROOM.value],
    [QKeyboard.TAGS.value],
    [QKeyboard.REVIEW.value],
]
question_markup = ReplyKeyboardMarkup(question_keyboard)

# It can be either a keyboard key, or the input text from the user
CUR_FIELD_KEY = "cur_field"

DO_NOT_SEND_ROOM = "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"
rooms = {r.title: r for r in get_rooms()}


def get_rooms_markup() -> list:
    room_names = list(rooms.keys())
    room_names.append(DO_NOT_SEND_ROOM)

    num_columns = 2
    return [room_names[i:i + num_columns] for i in range(0, len(room_names), num_columns)]


room_choose_markup = ReplyKeyboardMarkup(get_rooms_markup())

hyperlink_format = "<a href=\"{href}\">{text}</a>".format


def start(update: Update, context: CallbackContext) -> State:
    user = get_club_user(update)
    if not user:
        return ConversationHandler.END

    user_ask_ban = UserAskBan.objects.filter(user=user).first()
    if user_ask_ban and user_ask_ban.is_banned:
        update.message.reply_text("üôà –¢—ã –≤ –±–∞–Ω–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
        return ConversationHandler.END

    yesterday = datetime.utcnow() - timedelta(hours=24)
    question_number = Question.objects.filter(user=user) \
        .filter(created_at__gte=yesterday) \
        .count()

    question_limit = 3
    if question_number >= question_limit:
        update.message.reply_text("–¢—ã –æ—á–µ–Ω—å –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª–µ–Ω(—å–Ω–∞)! –ù–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤, —è —É—Å—Ç–∞–ª üò´")
        return ConversationHandler.END

    update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –¥–æ–±—Ä—ã–π —á–µ–ª–æ–≤–µ–∫ ü§ó\n\n\n"
        "–Ø –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–æ–º–Ω—é:\n\n"
        "‚ùóÔ∏è –§–ª—É–¥ –∏ —Å–ø–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –¢—É—Ç –¥–µ–π—Å—Ç–≤—É—é—Ç –≤—Å–µ <a href=\"https://vas3k.club/docs/about/\">–ø—Ä–∞–≤–∏–ª–∞ –ö–ª—É–±–∞</a>.\n\n"
        "üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–∑—É –¥–∞–≤–∞—Ç—å –ø–æ–Ω—è—Ç—å —Å—É—Ç—å, –∞ –Ω–µ –∑–∞–∏–≥—Ä—ã–≤–∞—Ç—å —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π.\n\n"
        "üìù –§–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ. "
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª(–∞), –∏ —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å.\n\n"
        "#Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –ø–æ–º–æ–∂–µ—Ç –≤ –ø–æ–∏—Å–∫–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤, –Ω–æ –æ–Ω–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã\n\n\n"
        "–ö–Ω–æ–ø–∫–∞ \"–ö–æ–º–Ω–∞—Ç–∞\" –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É (–∫–ª—É–±–Ω—ã–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç) –≤ –∫–æ—Ç–æ—Ä—É—é —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç "
        "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å",
        parse_mode=ParseMode.HTML,
        reply_markup=question_markup,
        disable_web_page_preview=True,
    )

    return State.REQUEST_FOR_INPUT


def question_to_str(user_data: Dict[str, str]) -> str:
    title = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n{user_data.get(QKeyboard.TITLE.value, '')}\n\n" if user_data.get(
        QKeyboard.TITLE.value) else ""
    body = f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:\n{user_data.get(QKeyboard.BODY.value, '')}\n\n\n" if user_data.get(
        QKeyboard.BODY.value) else ""
    tags = f"–¢–µ–≥–∏: {user_data.get(QKeyboard.TAGS.value, '')}\n\n" if user_data.get(QKeyboard.TAGS.value) else ""
    room = f"–ö–æ–º–Ω–∞—Ç–∞: {user_data.get(QKeyboard.ROOM.value, '')}" if user_data.get(
        QKeyboard.ROOM.value) else ""
    return title + body + tags + room


def request_text_value(update: Update, context: CallbackContext) -> State:
    text = update.message.text
    context.user_data[CUR_FIELD_KEY] = text
    update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—è: {text}",
                              reply_markup=ReplyKeyboardRemove())

    return State.INPUT_RESPONSE


def input_response(update: Update, context: CallbackContext) -> State:
    user_data = context.user_data
    text = update.message.text
    field = user_data[CUR_FIELD_KEY]
    user_data[field] = text
    del user_data[CUR_FIELD_KEY]

    update.message.reply_text(
        "–°–µ–π—á–∞—Å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: \n\n"
        f"{question_to_str(user_data)}",
        reply_markup=question_markup,
    )

    return State.REQUEST_FOR_INPUT


def request_room_choose(update: Update, context: CallbackContext) -> State:
    context.user_data[CUR_FIELD_KEY] = QKeyboard.ROOM.value
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å",
        reply_markup=room_choose_markup,
    )
    return State.INPUT_RESPONSE


def review_question(update: Update, context: CallbackContext) -> State:
    user_data = context.user_data

    title = user_data.get(QKeyboard.TITLE.value, None)
    body = user_data.get(QKeyboard.BODY.value, None)
    if not title or not body:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
        return edit_question(update, context)

    title_len_limit = 150
    body_len_limit = 2500
    if len(title) > title_len_limit:
        update.message.reply_text(
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É {title_len_limit}. –ü–æ–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return edit_question(update, context)

    if len(body) > body_len_limit:
        update.message.reply_text(f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É {body_len_limit}. –ü–æ–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return edit_question(update, context)

    update.message.reply_text(
        "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å–µ –≤–µ—Ä–Ω–æ:\n\n"
        f"{question_to_str(user_data)}",
        reply_markup=ReplyKeyboardMarkup([
            ["–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"],
            ["–û—Ç–º–µ–Ω–∏—Ç—å"]
        ]
        ),
    )
    return State.FINISH_REVIEW


def publish_question(update: Update, user_data: Dict[str, str]) -> str:
    title = user_data[QKeyboard.TITLE.value]
    body = user_data[QKeyboard.BODY.value]
    json_text = {
        "title": title,
        "body": body
    }
    tags = user_data.get(QKeyboard.TAGS.value, None)
    if tags:
        json_text["tags"] = tags

    room_title = user_data.get(QKeyboard.ROOM.value, None)
    if room_title and room_title != DO_NOT_SEND_ROOM:
        json_text["room"] = room_title

    question = Question(
        user=get_club_user(update),
        json_text=json_text)
    question.save()

    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    user_link = hyperlink_format(href=f"tg://user?id={user_id}", text=user_name)

    room_chat_msg_text = \
        f"–í–æ–ø—Ä–æ—Å –æ—Ç {user_link}\n\n" \
        f"<b>{title}</b>\n\n" \
        f"{body}"

    if tags:
        room_chat_msg_text = f"{room_chat_msg_text}\n\n{tags}"

    room = rooms[room_title] if room_title and room_title != DO_NOT_SEND_ROOM else None
    room_chat_msg = None
    if room and room.chat_id:
        room_chat_msg = send_msg(room.chat_id, room_chat_msg_text)

    channel_msg_text = room_chat_msg_text

    if room_chat_msg:
        question.room = room
        question.room_chat_msg_id = room_chat_msg.message_id

        group_msg_link = chat_msg_link(
            room.chat_id.replace("-100", ""),
            room_chat_msg.message_id)
        channel_msg_text = (f"{channel_msg_text}\n\n" +
                            hyperlink_format(href=group_msg_link, text="–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —á–∞—Ç–µ"))

    channel_msg = send_msg(
        chat_id=settings.TELEGRAM_ASK_BOT_QUESTION_CHANNEL_ID,
        text=channel_msg_text
    )

    question.channel_msg_id = channel_msg.message_id
    question.save()

    return channel_msg_link(channel_msg.message_id)


def edit_question(update: Update, context: CallbackContext) -> State:
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        reply_markup=question_markup,
    )
    return State.REQUEST_FOR_INPUT


def finish_review(update: Update, context: CallbackContext) -> State:
    user_data = context.user_data
    text = update.message.text

    if text == "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å":
        link = publish_question(update, user_data)
        update.message.reply_text(
            "üéâ –£—Ä–∞! –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. \n" +
            hyperlink_format(href=link, text="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å, —Ç–∞–º –∂–µ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã"),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
        return ConversationHandler.END
    elif text == "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        return edit_question(update, context)
    elif text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        update.message.reply_text(
            "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    else:
        raise Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + text)


def fallback(update: Update, context: CallbackContext) -> State:
    update.message.reply_text(
        "–ü–æ—Ö–æ–∂–µ —Ç—ã –Ω–∞—á–∞–ª –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–≤ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
        reply_markup=question_markup,
    )
    return State.REQUEST_FOR_INPUT


def error_fallback(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
    )
    return ConversationHandler.END


class QuestionHandler(ConversationHandler):
    def __init__(self, command):
        # Call the constructor of the parent class using super()
        super().__init__(
            entry_points=[CommandHandler(command, start)],
            states={
                State.REQUEST_FOR_INPUT: [
                    MessageHandler(
                        Filters.regex(f"^({QKeyboard.TITLE.value}|{QKeyboard.BODY.value}|{QKeyboard.TAGS.value})$"),
                        request_text_value
                    ),
                    MessageHandler(
                        Filters.regex(f"^{QKeyboard.ROOM.value}$"),
                        request_room_choose
                    ),
                    MessageHandler(
                        Filters.regex(f"^{QKeyboard.REVIEW.value}$"),
                        review_question
                    ),
                    MessageHandler(
                        Filters.text & ~Filters.command,
                        fallback
                    )
                ],
                State.INPUT_RESPONSE: [
                    MessageHandler(
                        Filters.text & ~Filters.command,
                        input_response,
                    ),
                ],
                State.FINISH_REVIEW: [
                    MessageHandler(
                        Filters.text & ~Filters.command,
                        finish_review,
                    )
                ]
            },
            fallbacks=[MessageHandler(Filters.all, error_fallback)],
        )


def update_discussion_message_id(update: Update) -> None:
    channel_msg_id = update.message.forward_from_message_id
    discussion_msg_id = update.message.message_id

    question = Question.objects.filter(channel_msg_id=channel_msg_id).first()
    question.discussion_msg_id = discussion_msg_id
    question.save()
