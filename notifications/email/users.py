from django.template import loader, TemplateDoesNotExist

from auth.models import Code
from bot.handlers.common import RejectReason
from notifications.email.sender import send_club_email
from users.models.user import User


def send_payed_email(user: User):
    payment_template = loader.get_template("emails/payment_done.html")
    send_club_email(
        recipient=user.email,
        subject=f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞",
        html=payment_template.render({"user": user}),
        tags=["payment"]
    )


def send_welcome_drink(user: User):
    welcome_drink_template = loader.get_template("emails/welcome.html")
    send_club_email(
        recipient=user.email,
        subject=f"–í–µ–ª–∫–æ–º –¥—Ä–∏–Ω–∫ üç∏",
        html=welcome_drink_template.render({"user": user}),
        tags=["welcome"]
    )


def send_rejected_email(user: User, reason: RejectReason):
    try:
        rejected_template = loader.get_template(f"emails/rejected/{reason.value}.html")
    except TemplateDoesNotExist:
        rejected_template = loader.get_template(f"emails/rejected/intro.html")

    send_club_email(
        recipient=user.email,
        subject=f"üòï –ü–æ–∫–∞ –Ω–µ—Ç",
        html=rejected_template.render({"user": user}),
        tags=["rejected"]
    )


def send_auth_email(user: User, code: Code):
    auth_template = loader.get_template("emails/auth.html")
    send_club_email(
        recipient=user.email,
        subject=f"{code.code} ‚Äî –≤–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞",
        html=auth_template.render({"user": user, "code": code}),
        tags=["auth"]
    )


def send_unmoderated_email(user: User):
    rejected_template = loader.get_template("emails/unmoderated.html")
    send_club_email(
        recipient=user.email,
        subject=f"üò± –í–∞—Å —Ä–∞–∑–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–ª–∏",
        html=rejected_template.render({"user": user}),
        tags=["unmoderated"]
    )


def send_banned_email(user: User, days: int, reason: str):
    if not user.is_banned or not days:
        return  # not banned oO

    rejected_template = loader.get_template("emails/banned.html")
    send_club_email(
        recipient=user.email,
        subject=f"üí© –í–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏",
        html=rejected_template.render({
            "user": user,
            "days": days,
            "reason": reason,
        }),
        tags=["banned"]
    )


def send_ping_email(user: User, message: str):
    rejected_template = loader.get_template("emails/ping.html")
    send_club_email(
        recipient=user.email,
        subject=f"üëã –í–∞–º –ø–∏—Å—å–º–æ",
        html=rejected_template.render({"message": message}),
        tags=["ping"]
    )


def send_data_archive_ready_email(user: User, url: str):
    auth_template = loader.get_template("emails/data_archive_ready.html")
    send_club_email(
        recipient=user.email,
        subject=f"üíΩ –í–∞—à –∞—Ä—Ö–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –≥–æ—Ç–æ–≤",
        html=auth_template.render({"user": user, "url": url}),
        tags=["gdpr"]
    )


def send_delete_account_request_email(user: User, code: Code):
    auth_template = loader.get_template("emails/delete_account_request.html")
    send_club_email(
        recipient=user.email,
        subject=f"üß® –ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞",
        html=auth_template.render({"user": user, "code": code}),
        tags=["killme"]
    )


def send_delete_account_confirm_email(user: User):
    auth_template = loader.get_template("emails/delete_account_confirm.html")
    send_club_email(
        recipient=user.email,
        subject=f"‚úåÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –ö–ª—É–±–µ –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω",
        html=auth_template.render({"user": user}),
        tags=["killme"]
    )
