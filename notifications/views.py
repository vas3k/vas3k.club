import base64
import hashlib
import hmac
import json

from django.conf import settings
from django.core.cache import cache
from django.http import Http404, HttpResponse
from django.shortcuts import render, get_object_or_404

from auth.helpers import auth_required
from club.exceptions import AccessDenied, NotFound

from common.request import ajax_request
from notifications.digests import generate_daily_digest, generate_weekly_digest
from users.models.user import User


def email_confirm(request, secret, legacy_code=None):
    # secret is user.id (uuid)
    user = get_object_or_404(User, id=secret)
    user.is_email_verified = True
    user.save()

    return render(request, "message.html", {
        "title": "üíå –í–∞—à –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        "message": "–¢–µ–ø–µ—Ä—å —Ç—É–¥–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª –ö–ª—É–±–∞ –∏ –¥—Ä—É–≥–∏–µ –æ–ø–æ–≤–µ—â–∞–ª–∫–∏."
    })


def email_unsubscribe(request, user_id, secret):
    try:
        # dirty hack to support legacy non-base64 codes
        secret = base64.b64decode(secret.encode("utf-8")).decode()
    except:
        pass

    user = get_object_or_404(User, id=user_id, secret_hash=secret)

    user.is_email_unsubscribed = True
    user.email_digest_type = User.EMAIL_DIGEST_TYPE_NOPE
    user.save()

    return render(request, "message.html", {
        "title": "üôÖ‚Äç‚ôÄÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö –ø–∏—Å–µ–º –ö–ª—É–±–∞",
        "message": "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è, –ø–æ—Ç–æ–º—É –æ—Ç–ø–∏—Å–∞–ª–∏ –≤–∞—Å –æ—Ç –≤—Å–µ–≥–æ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é. "
                   "–í—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç –Ω–∞—Å –Ω–∏–∫–∞–∫–∏—Ö –ø–∏—Å–µ–º. "
                   "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    })


def email_digest_switch(request, digest_type, user_id, secret):
    try:
        # dirty hack to support legacy non-base64 codes
        secret = base64.b64decode(secret.encode("utf-8")).decode()
    except:
        pass

    user = get_object_or_404(User, id=user_id, secret_hash=secret)

    if not dict(User.EMAIL_DIGEST_TYPES).get(digest_type):
        raise Http404()

    user.email_digest_type = digest_type
    user.is_email_unsubscribed = False
    user.save()

    if digest_type == User.EMAIL_DIGEST_TYPE_DAILY:
        return render(request, "message.html", {
            "title": "üî• –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–µ–π–ª–∏-–¥–∞–π–¥–∂–µ—Å—Ç",
            "message": "–û—Ñ–∏–≥–µ–Ω–Ω–æ. "
                       "–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–æ–≤–æ–≥–æ –≤ –ö–ª—É–±–µ."
        })
    elif digest_type == User.EMAIL_DIGEST_TYPE_WEEKLY:
        return render(request, "message.html", {
            "title": "üìÖ –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª",
            "message": "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫–∞ –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ö–ª—É–±–µ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é, "
                       "–∞ —Ç–∞–∫–∂–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –≤—Ä–æ–¥–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª. "
                       "–≠—Ç–æ —É–¥–æ–±–Ω–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ –æ—Ç–Ω–∏–º–∞–µ—Ç –≤–∞—à–µ –≤—Ä–µ–º—è."
        })
    elif digest_type == User.EMAIL_DIGEST_TYPE_NOPE:
        return render(request, "message.html", {
            "title": "üôÖ‚Äç‚ôÄÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ –ö–ª—É–±–∞",
            "message": "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è, –ø–æ—Ç–æ–º—É –æ—Ç–ø–∏—Å–∞–ª–∏ –≤–∞—Å –æ—Ç –Ω–∞—à–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. "
                       "–ú–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        })
    else:
        return render(request, "message.html", {
            "title": "üëç –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã",
            "message": ""
        })


def render_daily_digest(request, user_slug):
    user = get_object_or_404(User, slug=user_slug)

    try:
        digest = generate_daily_digest(user)
    except NotFound:
        raise Http404()

    return HttpResponse(digest)


def render_weekly_digest(request):
    try:
        digest = generate_weekly_digest()
    except NotFound:
        raise Http404()

    return HttpResponse(digest)


@auth_required
@ajax_request
def link_telegram(request):
    if not request.body:
        raise Http404()

    if request.method == "POST":
        data = json.loads(request.body)
        if not data.get("id") or not data.get("hash"):
            return render(request, "error.html", {
                "title": "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                "message": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.",
            }, status=400)

        if not is_valid_telegram_data(data, settings.TELEGRAM_TOKEN):
            raise AccessDenied(title="–ü–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")

        request.me.telegram_id = data["id"]
        request.me.telegram_data = data
        request.me.save()

        cache.delete("bot:telegram_user_ids")

        full_name = str(request.me.telegram_data.get("first_name") or "") \
            + str(request.me.telegram_data.get("last_name") or "")

        return {
            "status": "success",
            "telegram": {
                "id": request.me.telegram_id,
                "username": request.me.telegram_data.get("username") or full_name,
                "full_name": full_name,
            }
        }

    return {"status": "nope"}


def is_valid_telegram_data(data, bot_token):
    data = dict(data)
    check_hash = data.pop('hash')
    check_list = ['{}={}'.format(k, v) for k, v in data.items()]
    check_string = '\n'.join(sorted(check_list))

    secret_key = hashlib.sha256(bot_token.encode()).digest()
    hmac_hash = hmac.new(
        secret_key,
        check_string.encode(),
        hashlib.sha256,
    ).hexdigest()

    return hmac_hash == check_hash
