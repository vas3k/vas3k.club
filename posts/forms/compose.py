from datetime import datetime

import pytz
from django import forms
from django.contrib.postgres.forms import SimpleArrayField
from django.core.exceptions import ValidationError

from common.url_metadata_parser import parse_url_preview
from posts.models.post import Post
from posts.models.topics import Topic
from common.forms import ImageUploadField
from users.models.user import User


class PostForm(forms.ModelForm):
    topic = forms.ModelChoiceField(
        label="–ö–æ–º–Ω–∞—Ç–∞",
        required=False,
        empty_label="–î–ª—è –≤—Å–µ—Ö",
        queryset=Topic.objects.filter(is_visible=True).all(),
    )
    is_public = forms.ChoiceField(
        label="–í–∏–¥–µ–Ω –ª–∏ –≤ –±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç?",
        choices=((True, "–ü—É–±–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç"), (False, "–¢–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö")),
        widget=forms.RadioSelect(attrs={"required": "required"}),
        required=False
    )

    class Meta:
        abstract = True

    def clean_topic(self):
        topic = self.cleaned_data["topic"]

        if topic and not topic.is_visible_in_feeds:
            # topic settings are more important
            self.instance.is_visible_in_feeds = False

        return topic

    def validate_coauthors(self, cleaned_data):
        non_existing_coauthors = [coauthor for coauthor in cleaned_data.get("coauthors", [])
                                  if not User.objects.filter(slug=coauthor).exists()]
        if non_existing_coauthors:
            raise ValidationError({"coauthors": "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {}".format(', '.join(non_existing_coauthors))})
        self.instance.coauthors = cleaned_data["coauthors"]



class PostTextForm(PostForm):
    title = forms.CharField(
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
        required=True,
        max_length=128,
        widget=forms.TextInput(attrs={"placeholder": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ ü§ô"}),
    )
    text = forms.CharField(
        label="–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞",
        required=True,
        max_length=500000,
        widget=forms.Textarea(
            attrs={
                "maxlength": 500000,
                "class": "markdown-editor-full",
                "placeholder": "–î–æ—Ä–æ–≥–æ–π –ú–∞—Ä—Ç–∏–Ω –ê–ª–µ–∫—Å–µ–µ–≤–∏—á‚Ä¶"
            }
        ),
    )
    coauthors = SimpleArrayField(
        forms.CharField(max_length=32),
        max_length=10,
        label="–°–æ–∞–≤—Ç–æ—Ä—ã –ø–æ—Å—Ç–∞",
        required=False,
    )

    class Meta:
        model = Post
        fields = ["title", "text", "topic", "is_public", "coauthors"]

    def clean(self):
        cleaned_data = super().clean()
        self.validate_coauthors(cleaned_data)
        return cleaned_data


class PostLinkForm(PostForm):
    url = forms.URLField(
        label="–°—Å—ã–ª–∫–∞",
        required=True,
        widget=forms.TextInput(attrs={"placeholder": "–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å—é–¥–∞ ü§è"}),
    )
    title = forms.CharField(
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
        required=True,
        max_length=128,
        widget=forms.TextInput(attrs={"placeholder": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Å—ã–ª–∫–∏"}),
    )
    text = forms.CharField(
        label="TL;DR",
        required=True,
        max_length=50000,
        widget=forms.Textarea(
            attrs={
                "minlength": 350,
                "maxlength": 50000,
                "class": "markdown-editor-full",
                "data-listen": "keyup",
                "placeholder": "–ù–∞–ø–∏—à–∏—Ç–µ TL;DR —á—Ç–æ–±—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥—Ä—É–≥–∏–º –≤—Ä–µ–º—è."
                               "\n\n–ö–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —á–µ–º —Å—Å—ã–ª–∫–∞, –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, "
                               "–∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∑–∞—Ü–µ–ø–∏–ª–∏, –∏ –ø–æ—á–µ–º—É –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å –¥–æ–ª–∂–µ–Ω –ø–æ–π—Ç–∏ –µ—ë –ø—Ä–æ—á–∏—Ç–∞—Ç—å."
                               "\n\n–ï—Å–ª–∏ —Ç–µ–º–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –¥–∏—Å–∫—É—Å—Å–∏—é ‚Äî –∑–∞–¥–∞–π—Ç–µ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç —Å–µ–±—è.",
            }
        ),
    )

    class Meta:
        model = Post
        fields = [
            "title",
            "text",
            "url",
            "topic",
            "is_public"
        ]

    def clean(self):
        cleaned_data = super().clean()

        parsed_url = parse_url_preview(cleaned_data.get("url"))
        if parsed_url:
            self.instance.metadata = dict(parsed_url._asdict())
            self.instance.url = parsed_url.url
            self.instance.image = parsed_url.favicon

        return cleaned_data


class PostQuestionForm(PostForm):
    title = forms.CharField(
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
        required=True,
        max_length=128,
        widget=forms.TextInput(attrs={"placeholder": "–í–æ–ø—Ä–æ—Å –∫—Ä–∞—Ç–∫–æ –∏ —á–µ—Ç–∫–æ ü§î"}),
    )
    text = forms.CharField(
        label="–†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è",
        required=True,
        max_length=500000,
        widget=forms.Textarea(
            attrs={
                "maxlength": 500000,
                "class": "markdown-editor-full",
                "placeholder": "–ë–æ–ª—å—à–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π ‚Äî –±—ã—Å—Ç—Ä–µ–µ –∫—Ç–æ-–Ω–∏–±—É–¥—å —Å–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å. "
                               "–ù–æ –∏ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞—Ç—å –Ω–µ —Å—Ç–æ–∏—Ç. "
                               "\n\n–û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –±—É–¥–µ—Ç —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è "
                               "–≤—ã —É–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –∏ –ø–æ—á–µ–º—É –æ–Ω–∏ –Ω–µ –ø–æ–¥–æ—à–ª–∏.",
            }
        ),
    )

    class Meta:
        model = Post
        fields = [
            "title",
            "text",
            "topic",
            "is_public"
        ]


class PostIdeaForm(PostForm):
    title = forms.CharField(
        label="–°—É—Ç—å –∏–¥–µ–∏",
        required=True,
        max_length=128,
        widget=forms.TextInput(attrs={"placeholder": "–ö—Ä–∞—Ç–∫–æ —Å—É—Ç—å –∏–¥–µ–∏ ü§î"}),
    )
    text = forms.CharField(
        label="–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        required=True,
        max_length=500000,
        widget=forms.Textarea(
            attrs={
                "maxlength": 500000,
                "class": "markdown-editor-full",
                "placeholder": "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏, –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–µ–π –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–ª–∏ –≤ –æ—Å–Ω–æ–≤—É –∏–¥–µ–∏. "
                               "–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...",
            }
        ),
    )

    class Meta:
        model = Post
        fields = [
            "title",
            "text",
            "topic",
            "is_public"
        ]


class PostEventForm(PostForm):
    def __init__(self, *args, **kwargs):
        instance = kwargs.get("instance")
        if instance and instance.metadata:
            kwargs.update(initial={
                "event_day": instance.metadata.get("event", {}).get("day") or datetime.utcnow().day,
                "event_month": instance.metadata.get("event", {}).get("month") or datetime.utcnow().month,
                "event_time": instance.metadata.get("event", {}).get("time") or "00:00",
                "event_timezone": instance.metadata.get("event", {}).get("timezone") or "UTC",
                "event_location": instance.metadata.get("event", {}).get("location") or "",
            })
        super().__init__(*args, **kwargs)

    title = forms.CharField(
        label="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
        required=True,
        max_length=128,
        widget=forms.TextInput(attrs={"placeholder": "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è üìÖ"}),
    )
    event_day = forms.ChoiceField(
        label="–î–µ–Ω—å",
        required=True,
        initial=lambda: datetime.utcnow().day,
        choices=[(i, i) for i in range(1, 32)],
    )
    event_month = forms.ChoiceField(
        label="–ú–µ—Å—è—Ü",
        required=True,
        initial=lambda: datetime.utcnow().month,
        choices=[
            (1, "—è–Ω–≤–∞—Ä—è"),
            (2, "—Ñ–µ–≤—Ä–∞–ª—è"),
            (3, "–º–∞—Ä—Ç–∞"),
            (4, "–∞–ø—Ä–µ–ª—è"),
            (5, "–º–∞—è"),
            (6, "–∏—é–Ω—è"),
            (7, "–∏—é–ª—è"),
            (8, "–∞–≤–≥—É—Å—Ç–∞"),
            (9, "—Å–µ–Ω—Ç—è–±—Ä—è"),
            (10, "–æ–∫—Ç—è–±—Ä—è"),
            (11, "–Ω–æ—è–±—Ä—è"),
            (12, "–¥–µ–∫–∞–±—Ä—è"),
        ]
    )
    event_time = forms.TimeField(
        label="–í—Ä–µ–º—è",
        required=True,
        widget=forms.TimeInput(attrs={"type": "time", "value": "10:00"}),
    )
    event_timezone = forms.ChoiceField(
        label="–¢–∞–π–º–∑–æ–Ω–∞",
        required=True,
        choices=[
            ("Europe/Moscow", "–ø–æ –ú–æ—Å–∫–≤–µ"),
            ("UTC", "UTC"),
        ]
    )
    event_location = forms.CharField(
        label="–õ–æ–∫–µ–π—à–µ–Ω",
        required=True,
        max_length=140,
        widget=forms.TextInput(attrs={"placeholder": "üìç –ê–¥—Ä–µ—Å –∏–ª–∏ —Å—Å—ã–ª–∫–∞"}),
    )
    text = forms.CharField(
        label="–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        required=True,
        max_length=500000,
        initial="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, —á—Ç–æ –∑–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –∑–∞—á–µ–º —Ç—É–¥–∞ –∏–¥—Ç–∏: "
                "–∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç, –∫–∞–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è. "
                "–ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–∏—è –∏–≤–µ–Ω—Ç–æ–≤, –¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–ª–æ.\n\n"
                "# –î–ª—è –∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n\n"
                "–ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∏–Ω–æ–∫–ª—É–± –∏–ª–∏ —Ö–∞–∫–∞—Ç–æ–Ω), "
                "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∫–∞–∫ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è.\n"
                "–ó–æ–≤—ë—Ç–µ –≤ –±–∞—Ä? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á–µ–º –æ–Ω –∑–Ω–∞–º–µ–Ω–∏—Ç –∏ —á—Ç–æ –≤ –º–µ–Ω—é.\n\n"
                "# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
                "–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, —Ç–æ –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, "
                "–∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –∏–ª–∏ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.\n\n"
                "# –ì–¥–µ –∏ –∫–æ–≥–¥–∞\n\n"
                "–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Å–±–æ—Ä –∏ –¥–æ —Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. "
                "–ö–∞–∫ –Ω–∞–π—Ç–∏ –≤—Ö–æ–¥, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –Ω–∞—Ä–∏—Å—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç.\n\n"
                "# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
                "–ï—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏? –ù–µ –ø—É—Å–∫–∞—é—Ç —Å —Å–æ–±–∞–∫–∞–º–∏? –ù–µ–ª—å–∑—è –∞–ª–∫–æ–≥–æ–ª—å?\n"
                "# –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ —á–∞—Ç–∏–∫, "
                "–∫—É–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Å—É–∂–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.",
        widget=forms.Textarea(
            attrs={
                "maxlength": 500000,
                "class": "markdown-editor-full",
            }
        ),
    )

    class Meta:
        model = Post
        fields = [
            "title",
            "text",
            "topic",
            "is_public"
        ]

    def clean(self):
        cleaned_data = super().clean()

        # validate event date
        try:
            now = datetime.utcnow()
            year = now.year if int(cleaned_data["event_month"]) >= now.year else now.year + 1
            datetime(
                year=year,
                month=int(cleaned_data["event_month"]),
                day=int(cleaned_data["event_day"]),
                hour=cleaned_data["event_time"].hour,
                minute=cleaned_data["event_time"].minute,
                second=cleaned_data["event_time"].second,
            )
        except (KeyError, ValueError):
            raise ValidationError({"event_day": "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞"})

        self.instance.metadata = {
            "event": {
                "day": cleaned_data["event_day"],
                "month": cleaned_data["event_month"],
                "time": str(cleaned_data["event_time"]),
                "timezone": cleaned_data["event_timezone"],
                "utc_offset": datetime.now(pytz.timezone(cleaned_data["event_timezone"]))
                .utcoffset().total_seconds() // 60,
                "location": cleaned_data["event_location"],
            }
        }
        return cleaned_data


class PostProjectForm(PostForm):
    title = forms.CharField(
        label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
        required=True,
        max_length=128,
        widget=forms.TextInput(attrs={"placeholder": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ üèó"}),
    )
    url = forms.URLField(
        label="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞ üëá",
        required=True,
        widget=forms.TextInput(attrs={"placeholder": "https://"}),
    )
    image = ImageUploadField(
        label="–°–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –∏–∫–æ–Ω–∫–∞",
        required=True,
        resize=(1024, 1024),
    )
    text = forms.CharField(
        label="–û–ø–∏—Å–∞–Ω–∏–µ",
        required=True,
        min_length=1500,
        initial="ü§ó –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –≤—Å–µ –∏–Ω—Å–∞–π–¥—ã –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ.\n\n "
                "–ù–∏–∂–µ –º—ã –Ω–∞–∫–∏–¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É—Å–ª—ã—à–∞—Ç—å –æ—Ç–≤–µ—Ç—ã. "
                "–û–Ω –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ø—Ä–æ–±–ª–µ–º–æ–π —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ –∏ –∑–∞–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. "
                "–ù–µ –Ω—É–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –µ–≥–æ –±—É–∫–≤–∞–ª—å–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–º –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ —á–∏—Ç–∞—Ç—å –≤–∞—à –æ–ø—ã—Ç.\n\n"
                "‚ö†Ô∏è –ò –µ—â–µ —Ä–∞–∑: –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º —Ä–∞—Å—Å–∫–∞–∑–æ–º –æ –ø—Ä–æ–µ–∫—Ç–µ "
                "–∏ –±—É–¥—É—Ç —Ä–∞—Å—Ü–µ–Ω–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∫–∞–∫ —Å–ø–∞–º. –ù–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∏–º–µ–Ω–Ω–æ –≤–∞—à –æ–ø—ã—Ç –∏ –∏—Å—Ç–æ—Ä–∏–∏, "
                "–∞ –Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!\n\n"
                "### –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Å—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞?\n\n\n\n"
                "### –ö–∞–∫ –ø–æ—è–≤–∏–ª–∞—Å—å –∏–¥–µ—è? –ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–æ?\n\n\n\n"
                "### –ß—Ç–æ –≤–æ—à–ª–æ –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø –∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –Ω–µ–≥–æ –±—ã–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ?\n\n\n\n"
                "### –ö–∞–∫–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏? –ü–æ—á–µ–º—É?\n\n\n\n"
                "### –ö–∞–∫ –≤—ã –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å –∏ –∏—Å–∫–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n\n\n\n"
                "### –° –∫–∞–∫–∏–º–∏ —Å–∞–º—ã–º–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –ø—Ä–∏—à–ª–æ—Å—å —Å—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è?\n\n\n\n"
                "### –°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏? –ï—Å—Ç—å –∏–¥–µ–∏ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å?\n\n\n\n"
                "### –ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ?\n\n\n\n"
                "### –ù—É–∂–Ω—ã –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Å–æ–≤–µ—Ç—ã –∏–ª–∏ –ø–æ–º–æ—â—å –ö–ª—É–±–∞?\n\n\n\n"
                "### –ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –≤—ã –±—ã —Å–∞–º–∏ –º–æ–≥–ª–∏ –¥–∞—Ç—å –∏–¥—É—â–∏–º –ø–æ –≤–∞—à–∏–º —Å—Ç–æ–ø–∞–º?\n\n",
        max_length=500000,
        widget=forms.Textarea(
            attrs={
                "maxlength": 500000,
                "minlength": 1500,
                "class": "markdown-editor-full",
                "data-listen": "keyup",
                "placeholder": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ!"
                               "\n- –í —á–µ–º –µ–≥–æ —Å—É—Ç—å –∏ –∫–∞–∫ –æ–Ω –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º?"
                               "\n- –ö–∞–∫ –ø–æ—è–≤–∏–ª–∞—Å—å –∏–¥–µ—è?"
                               "\n- –ö–∞–∫–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏?"
                               "\n- –° –∫–∞–∫–∏–º–∏ —Å–∞–º—ã–º–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å?"
                               "\n- –°–∫–æ–ª—å–∫–æ –≤ –∏—Ç–æ–≥–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏?"
                               "\n- –ù—É–∂–Ω—ã –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Å–æ–≤–µ—Ç—ã –∏–ª–∏ –ø–æ–º–æ—à—å –ö–ª—É–±–∞?"
            }
        ),
    )

    class Meta:
        model = Post
        fields = [
            "title",
            "text",
            "topic",
            "url",
            "image",
            "is_public"
        ]


class PostBattleForm(PostForm):
    def __init__(self, *args, **kwargs):
        instance = kwargs.get("instance")
        if instance and instance.metadata:
            kwargs.update(initial={
                "side_a": instance.metadata.get("battle", {}).get("sides", {}).get("a", {}).get("name") or "",
                "side_b": instance.metadata.get("battle", {}).get("sides", {}).get("b", {}).get("name") or "",
            })
        super().__init__(*args, **kwargs)

    side_a = forms.CharField(
        label="–û–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞",
        required=True,
        max_length=64,
    )
    side_b = forms.CharField(
        label="–í—Ç–æ—Ä–∞—è —Å—Ç–æ—Ä–æ–Ω–∞",
        required=True,
        max_length=64,
    )
    text = forms.CharField(
        label="–°—É—Ç—å",
        required=True,
        max_length=500000,
        widget=forms.Textarea(
            attrs={
                "maxlength": 5000,
                "class": "markdown-editor-full",
                "placeholder": "–ù–µ –≤—Å–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∏–ª–µ–º–º—ã –æ—á–µ–≤–∏–¥–Ω—ã —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞. "
                               "–î–∞–π—Ç–µ –Ω–∞–º –Ω–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n\n"
                               "–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –¥–∞–≤–∞—Ç—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫. "
                               "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏—Å–∫–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. "
                               "–õ—É—á—à–µ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–≤—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–∞—Ç–ª–∞.",
            }
        ),
    )

    class Meta:
        model = Post
        fields = [
            "text",
            "topic",
            "is_public"
        ]

    def clean(self):
        cleaned_data = super().clean()
        self.instance.is_public = True  # FIXME: dirty hardcode
        self.instance.metadata = {
            "battle": {
                "sides": {
                    "a": {"name": cleaned_data["side_a"]},
                    "b": {"name": cleaned_data["side_b"]},
                }
            }
        }
        self.instance.title = f"{cleaned_data['side_a']} –∏–ª–∏ {cleaned_data['side_b']}"
        cleaned_data["title"] = self.instance.title
        return cleaned_data


class PostGuideForm(PostForm):
    title = forms.CharField(
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
        required=True,
        max_length=128,
        widget=forms.TextInput(
            attrs={
                "placeholder": "–ö–ª—É–±–Ω—ã–π –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å: ******",
                "value": "–ö–ª—É–±–Ω—ã–π –ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å: ******",
            }
        ),
    )
    text = forms.CharField(
        label="–¢–µ–∫—Å—Ç –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è",
        required=True,
        max_length=500000,
        initial="–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω —à–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ.\b\b"
                "–ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤–≤–µ–¥–µ–Ω–∏—è: —á–µ–º —Å–ª–∞–≤–∏—Ç—Å—è –≤–∞—à –≥–æ—Ä–æ–¥, –∫–∞–∫ –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –∏ –∑–∞—á–µ–º –≤ –Ω–µ–≥–æ –µ—Ö–∞—Ç—å?\n\n"
                "# –ö–∞—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞\n\n"
                "–û–±–≤–µ–¥–∏—Ç–µ –Ω–∞ –Ω–µ–π –≤—Å–µ –≥–ª–∞–≤–Ω—ã–µ –º–µ—Å—Ç–∞ ‚Äî –≥–¥–µ —Ü–µ–Ω—Ç—Ä, –≥–¥–µ —Ç—É—Å–∏—Ç—å, –≥–¥–µ –∂–∏—Ç—å, –≥–¥–µ –µ—Å—Ç—å, –≥–¥–µ —Ö–æ–¥–∏—Ç—å. "
                "–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–∞ hoodmaps.com, –º–æ–∂–µ—Ç–µ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É, –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ. "
                "–ú–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ.\n\n"
                "# –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
                "- **–í–∞–ª—é—Ç–∞**\n"
                "   - [–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫—É—Ä—Å –∏ –∫–∞–∫ –ø—Ä–æ—â–µ –µ–≥–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å]\n"
                "- **–ù–∞—Å–µ–ª–µ–Ω–∏–µ**\n"
                "   - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫]\n"
                "- **–í–∏–∑—ã**\n"
                "   - [–Ω—É–∂–Ω–∞ –ª–∏ —Å–æ–∫–ª—É–±–Ω–∏–∫–∞–º –≤–∏–∑–∞, –ø–∞—Å–ø–æ—Ä—Ç –∏ –∫–∞–∫–æ–π]\n"
                "- **–ö–æ–≥–¥–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–µ–∑–∂–∞—Ç—å?**\n"
                "   - [–º–µ—Å—è—Ü –∏–ª–∏ —Å–µ–∑–æ–Ω]\n"
                "- **–ß—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π?**\n"
                "   - [–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –¥–ª—è —Ä–æ–∑–µ—Ç–æ–∫, –∫—Ä–µ–º –æ—Ç —Å–æ–ª–Ω—Ü–∞, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ]\n"
                "- **–ö–∞–∫ –ª—É—á—à–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –∏–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞?**\n"
                "   - [–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã]\n"
                "- **–ö–∞–∫ –ª—É—á—à–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ –≥–æ—Ä–æ–¥—É?**\n"
                "   - [–≤–∑—è—Ç—å –±–∏–ª–µ—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫—Å–∏?]\n"
                "- **–ö–∞–∫ –≤—ã–∑—ã–≤–∞—Ç—å —Ç–∞–∫—Å–∏?**\n"
                "   - [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω]\n"
                "- **–ï—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã?**\n"
                "   - [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è]\n"
                "- **–ö–∞–∫—É—é –∫—É–ø–∏—Ç—å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Å–∏–º–∫—É?**\n"
                "   - [–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞–∫ –∫—É–ø–∏—Ç—å]\n"
                "- **–ú–æ–∂–Ω–æ –ª–∏ –≤–µ–∑–¥–µ –ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π?**\n"
                "   - [–¥–∞, –ª–∏–±–æ —Å—É–º–º–∞ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —Å–Ω—è—Ç—å]\n"
                "- **–ú–æ–∂–Ω–æ –ª–∏ –ø–∏—Ç—å –≤–æ–¥—É –∏–∑ –∫—Ä–∞–Ω–∞?**\n"
                "   - [–¥–∞/–Ω–µ—Ç/–≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç]\n"
                "- **–ì–ª–∞–≤–Ω—ã–µ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã –¥–ª—è –µ–¥—ã?**\n"
                "   - [–Ω–∞–∑–≤–∞–Ω–∏—è –∏ —á–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è]\n"
                "- **–ì–æ–≤–æ—Ä—è—Ç –ª–∏ –ª—é–¥–∏ –Ω–∞ —É–ª–∏—Ü–µ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏?**\n"
                "   - [–∏ –∫–∞–∫ –∫ –Ω–∏–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é]\n"
                "- **–ß—Ç–æ –Ω—É–∂–Ω–æ 100% —É–≤–∏–¥–µ—Ç—å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?**\n"
                "   - [–º–µ—Å—Ç–∞, –ª—é–¥–∏, —è–≤–ª–µ–Ω–∏—è]\n"
                "- **–ß–µ–≥–æ –æ—Å—Ç–µ—Ä–µ–≥–∞—Ç—å—Å—è?**\n"
                "   - [–º–µ—Å—Ç–∞, –ª—é–¥–∏, —è–≤–ª–µ–Ω–∏—è]\n"
                "- **–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º —Å—Ç–æ–∏—Ç 1 —à–∞—É—Ä–º–∞?**\n"
                "   - [–≤ –º–µ—Å—Ç–Ω–æ–π –≤–∞–ª—é—Ç–µ]\n\n"
                "# –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç —Ç—É—Ä–∏—Å—Ç–∞\n\n"
                "...\n\n"
                "# ¬´–ù–µ—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ¬ª –º–∞—Ä—à—Ä—É—Ç—ã\n\n"
                "...\n\n"
                "# –ì–¥–µ –∂–∏—Ç—å?\n\n"
                "...\n\n"
                "# –ì–¥–µ –∏ —á—Ç–æ –ø–æ–µ—Å—Ç—å/–≤—ã–ø–∏—Ç—å?\n\n"
                "...\n\n"
                "# –ì–¥–µ –∑–∞—Ç—É—Å–∏—Ç—å –≤–µ—á–µ—Ä–æ–º?\n\n"
                "...\n\n"
                "# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≥–¥–µ –µ—â–µ —Å—Ç–æ–∏—Ç –ø–æ–±—ã–≤–∞—Ç—å? –°–æ–≤–µ—Ç—ã –æ—Ç –º–µ—Å—Ç–Ω—ã—Ö\n\n"
                "...\n\n"
                "# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —á—Ç–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —á—Ç–æ–±—ã —É–≤–µ–∑—Ç–∏ —Å —Å–æ–±–æ–π\n\n"
                "...\n\n"
                "# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∏–∫ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã\n\n"
                "...\n\n",
        widget=forms.Textarea(
            attrs={
                "maxlength": 500000,
                "class": "markdown-editor-full",
            }
        ),
    )
    coauthors = SimpleArrayField(
        forms.CharField(max_length=32),
        max_length=10,
        label="–°–æ–∞–≤—Ç–æ—Ä—ã –ø–æ—Å—Ç–∞",
        required=False,
    )

    class Meta:
        model = Post
        fields = ["title", "text", "topic", "is_public", "coauthors"]

    def clean(self):
        cleaned_data = super().clean()
        self.validate_coauthors(cleaned_data)
        return cleaned_data


class PostThreadForm(PostForm):
    title = forms.CharField(
        label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
        required=True,
        max_length=128,
        widget=forms.TextInput(attrs={"placeholder": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ ü§ô"}),
    )
    text = forms.CharField(
        label="–¢–µ–∫—Å—Ç —Ç—Ä–µ–¥–∞",
        required=True,
        max_length=500000,
        widget=forms.Textarea(
            attrs={
                "maxlength": 500000,
                "class": "markdown-editor-full",
                "placeholder": "–î–æ—Ä–æ–≥–æ–π –ú–∞—Ä—Ç–∏–Ω –ê–ª–µ–∫—Å–µ–µ–≤–∏—á‚Ä¶"
            }
        ),
    )
    comment_template = forms.CharField(
        label="–®–∞–±–ª–æ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
        required=True,
        max_length=5000,
        widget=forms.Textarea(
            attrs={
                "maxlength": 5000,
                "class": "markdown-editor-full",
                "placeholder": "–ó–¥–µ—Å—å —Ç–æ–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Markdown"
            }
        ),
    )

    class Meta:
        model = Post
        fields = ["title", "text", "comment_template", "topic", "is_public"]


POST_TYPE_MAP = {
    Post.TYPE_POST: PostTextForm,
    Post.TYPE_LINK: PostLinkForm,
    Post.TYPE_QUESTION: PostQuestionForm,
    Post.TYPE_IDEA: PostIdeaForm,
    Post.TYPE_PROJECT: PostProjectForm,
    Post.TYPE_BATTLE: PostBattleForm,
    Post.TYPE_EVENT: PostEventForm,
    Post.TYPE_GUIDE: PostGuideForm,
    Post.TYPE_THREAD: PostThreadForm,
}
