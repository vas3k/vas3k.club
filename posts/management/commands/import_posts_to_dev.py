import json
import urllib.request
import urllib.error
from datetime import datetime, timedelta

from django.db import connections
from django.conf import settings
from django.core.management import BaseCommand

from posts.models.post import Post
from users.models.user import User
from comments.models import Comment
from common.markdown.markdown import markdown_text
from utils.strings import random_string

headers = {'User-Agent': 'posts-to-dev'}

# –æ—Ç–∫–ª—é—á–∞–µ–º foreign keys, —Ç.–∫. –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–π created_at, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç
# –∫ –æ—à–∏–±–∫–µ. –ø–æ —Å—É—Ç–∏ –∫–æ–º–º–µ–Ω—Ç —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—â—ë –Ω–µ—Ç –≤ –±–∞–∑–µ.
connection = connections['default']
with connection.cursor() as cursor:
    cursor.execute('SET session_replication_role TO \'replica\';')


class Command(BaseCommand):
    help = "–ò–º–ø–æ—Ä—Ç –ø–æ—Å—Ç–æ–≤ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ vas3k.club –Ω–∞ dev/local —Å–±–æ—Ä–∫–∏"

    def add_arguments(self, parser):
        parser.add_argument(
            "--pages",
            type=int,
            default=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –∑–∞–±–∏—Ä–∞–µ–º—ã—Ö –∏–∑ —Ñ–∏–¥–∞",
        )

        parser.add_argument(
            "--skip",
            type=int,
            default=0,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        )

        parser.add_argument(
            "--force",
            action="store_true",
            help="–ó–∞–º–µ–Ω—è—Ç—å –ø–æ—Å—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç",
        )

        parser.add_argument(
            "--with-comments",
            action="store_true",
            help="–í —Ç–æ–º —á–∏—Å–ª–µ –ø–∞—Ä—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è service_token)",
        )

        parser.add_argument(
            "--with-private",
            action="store_true",
            help="–í —Ç–æ–º —á–∏—Å–ª–µ –ø–∞—Ä—Å–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è service_token)",
        )

        parser.add_argument(
            "--service-token",
            help="service_token –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç: https://vas3k.club/apps/create/",
        )

    def handle(self, *args, **options):
        if not settings.DEBUG:
            return self.stdout.write("‚ò¢Ô∏è  –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ DEBUG —Ä–µ–∂–∏–º–µ")

        if options["service_token"]:
            headers.update({'X-Service-Token': options["service_token"]})
            req = urllib.request.Request("https://vas3k.club/user/me.json", headers=headers)
            try:
                urllib.request.urlopen(req)
            except urllib.error.HTTPError:
                return self.stdout.write(" ‚õî –ù–µ–≤–µ—Ä–Ω—ã–π service_token")

        if (options["with_comments"] or options["with_private"]) and not options["service_token"]:
            return self.stdout.write(
                " ‚õî –§–ª–∞–≥–∏ --with-comments –∏ --with-private –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å --service-token")

        result = {
            'post_exists': 0,
            'post_created': 0,
            'post_updated': 0,
            'user_created': 0,
            'comment_created': 0,
        }

        for x in range(options['skip'], options['pages'] + options['skip']):
            url = f"https://vas3k.club/feed.json?page={x + 1}"
            self.stdout.write(f"üìÅ {url}")
            req = urllib.request.Request(url, headers=headers)
            response = urllib.request.urlopen(req)
            data = json.load(response)
            for item in data['items']:
                # –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –Ω–∞—Ñ–∏–≥
                if not item['_club']['is_public'] and not options['with_private']:
                    continue

                author, created = create_user(item['authors'][0])
                if created:
                    result['user_created'] += 1
                    self.stdout.write(f" üë§ \"{author.full_name}\" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")

                *_, slug, _ = item['url'].split('/')

                defaults = dict(
                    id=item['id'],
                    title=item['title'],
                    type=item['_club']['type'],
                    slug=slug,
                    text=item['content_text'],
                    html=markdown_text(item['content_text']),
                    created_at=item['date_published'],
                    last_activity_at=item['date_modified'],
                    comment_count=item['_club']['comment_count'],
                    view_count=item['_club']['view_count'],
                    upvotes=item['_club']['upvotes'],
                    is_visible=True,
                    is_visible_in_feeds=True,
                    is_commentable=True,
                    is_approved_by_moderator=True,
                    is_public=item['_club']['is_public'],
                    author_id=author.id,
                    is_shadow_banned=False,
                    published_at=item['date_published'],
                    coauthors=[]
                )

                if item['_club']['type'] == "project":
                    defaults['image'] = author.avatar,  # —Ö–∞–∫ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Ç–∏–ø–∞ "–ø—Ä–æ–µ–∫—Ç", —á—Ç–æ–±—ã –Ω–µ –ª–∞–∑–∏—Ç—å –ø–æ –≤–∞—Å—Ç—Ä–∏–∫—É –ª–∏—à–Ω–∏–π —Ä–∞–∑

                try:
                    post = Post.objects.get(id=item['id'])
                    if not options['force']:
                        result['post_exists'] += 1
                        self.stdout.write(f" üìå \"{item['title']}\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        continue
                    else:
                        post.__dict__.update(**defaults)
                        post.save()
                        result['post_updated'] += 1
                        self.stdout.write(f" üìù \"{item['title']}\" –∑–∞–ø–∏—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞")

                except Post.DoesNotExist:
                    post = Post.objects.create(**defaults)
                    post.last_activity_at=item['date_modified']
                    post.save()
                    result['post_created'] += 1
                    self.stdout.write(f" üìÑ \"{item['title']}\" –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞")

                if options['with_comments']:
                    comments = parse_comments(item['id'], item['url'])
                    result['comment_created'] += comments
                    self.stdout.write(f"  üí¨ –∫ –ø–æ—Å—Ç—É \"{item['title']}\" —Å–ø–∞—Ä—à–µ–Ω–æ {comments} –∫–æ–º–º–µ–Ω—Ç–æ–≤")

        self.stdout.write("")
        self.stdout.write("–ì–æ—Ç–æ–≤–æ üåÆ")
        self.stdout.write(f"üìÑ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {result['post_created']}")
        self.stdout.write(f"üìå –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {result['post_exists']}")
        self.stdout.write(f"üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result['post_updated']}")
        self.stdout.write(f"üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result['user_created']}")
        self.stdout.write(f"üí¨ –ù–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–æ–≤: {result['comment_created']}")


def create_user(author):

    if 'name' in author:
        name = author['name']
    else:
        name = author['full_name']

    defaults = dict(
        avatar=author['avatar'],
        email=random_string(30),
        full_name=name,
        company="FAANG",
        position="Team Lead –∫–æ–Ω–µ—á–Ω–æ",
        balance=10000,
        created_at=datetime.utcnow(),
        updated_at=datetime.utcnow(),
        membership_started_at=datetime.utcnow(),
        membership_expires_at=datetime.utcnow() + timedelta(days=365 * 100),
        is_email_verified=True,
        moderation_status=User.MODERATION_STATUS_APPROVED,
        roles=[],
    )
    if 'id' not in author:
        *_, slug, _ = author['url'].split('/')
        defaults.update(slug=slug)

        if 'X-Service-Token' in headers.keys():
            req = urllib.request.Request(f"https://vas3k.club/user/{slug}.json", headers=headers)
            response = urllib.request.urlopen(req)
            data = json.load(response)
            defaults.update(**data['user'])
    else:
        defaults.update(**author)

    if 'is_active_member' in defaults.keys():
        defaults.pop('is_active_member')

    if 'payment_status' in defaults.keys():
        defaults.pop('payment_status')

    return User.objects.get_or_create(slug=defaults['slug'], defaults=defaults)


def parse_comments(post_id, url):
    req = urllib.request.Request(f"{url}comments.json", headers=headers)
    response = urllib.request.urlopen(req)
    data = json.load(response)
    comments = []
    for comment in data['comments']:
        if not Comment.objects.filter(id=comment['id']).exists():
            create_user(comment['author'])

            comments.append(Comment(
                id=comment['id'],
                text=comment['text'],
                author_id=comment['author']['id'],
                reply_to_id=comment['reply_to_id'],
                created_at=comment['created_at'],
                upvotes=comment['upvotes'],
                post_id=post_id,
            ))

    Comment.objects.bulk_create(comments, 100)
    return len(comments)
